import asyncio
import os

from aiogram import types, Dispatcher, Bot
from aiogram.dispatcher.router import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from sqlalchemy.testing.plugin.plugin_base import logging

from database.DatabaseInitialize import requests_initialize_database
from database.DatabaseManager import DatabaseManager
from gui.kb import keyboard_start_buttons, keyboard_main_manager_buttons, keyboard_main_director_buttons, \
    keyboard_main_accounting_buttons, keyboard_request_manager_buttons, keyboard_currency_manager_buttons, \
    keyboard_send_summary_manager_buttons, keyboard_modify_request_manager_buttons, \
    keyboard_purpose_of_payment_manager_buttons, keyboard_format_purpose_of_payment_manager_buttons
from gui.states import RequestStates

router_manager = Router()
router_director = Router()
router_accounting = Router()

load_dotenv()
token_api = os.getenv("TELEGRAM_BOT_API_KEY")
director_id = int(os.getenv("DIRECTOR_ID"))
accounting_id = int(os.getenv("ACCOUNTING_ID"))
bot = Bot(token_api)


def generate_summary(data):
    summary = (
        f"–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['manager_name']} \n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_request']}\n"
        f"–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {data['payment_date']}\n"
        f"–í–∞–ª—é—Ç–∞: {data['currency']}\n"
        f"–°—É–º–º–∞: {data['amount']}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–ª–∞—Ç–µ–∂–∞: {data['payment_to_whom']}\n"
        f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {data['purpose_of_payment']}\n"
        f"–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: {data['payment_format']}\n"
    )
    if data['payment_format'] == '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É':
        summary += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['payment_phone_number']}\n" \
                   f"–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞: {data['payment_recipient_name']}\n"
    summary += f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {data['due_date']}\n"
    return summary


field_names = {
    "manager_name": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
    "purpose_of_payment": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞",
    "payment_date": "–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞",
    "due_date": "–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã",
    "payment_format": "–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã",
    "payment_phone_number": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    "payment_recipient_name": "–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
    "currency": "–í–∞–ª—é—Ç–∞",
    "amount": "–°—É–º–º–∞",
    "payment_to_whom": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–ª–∞—Ç–µ–∂–∞",
    "phone_request": "–¢–µ–ª–µ—Ñ–æ–Ω",
}


def get_start_keyboard() -> ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(keyboard=keyboard_start_buttons, resize_keyboard=True)


def get_keyboard_main_manager_buttons() -> ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(keyboard=keyboard_main_manager_buttons, resize_keyboard=True)


def get_keyboard_main_director_buttons() -> ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(keyboard=keyboard_main_director_buttons, resize_keyboard=True)


def get_keyboard_main_accounting_buttons() -> ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(keyboard=keyboard_main_accounting_buttons, resize_keyboard=True)


def get_keyboard_request_manager_buttons() -> ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(keyboard=keyboard_request_manager_buttons, resize_keyboard=True)


def get_inline_keyboard_currency_manager_buttons() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder(markup=keyboard_currency_manager_buttons)
    return builder.as_markup()


def get_keyboard_send_summary_manager_buttons() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder(markup=keyboard_send_summary_manager_buttons)
    return builder.as_markup()


def get_keyboard_modify_request_manager_buttons() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder(markup=keyboard_modify_request_manager_buttons)
    return builder.as_markup()


def get_keyboard_purpose_of_payment_manager_buttons() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder(markup=keyboard_purpose_of_payment_manager_buttons)
    return builder.as_markup()


def get_keyboard_format_purpose_of_payment_manager_buttons() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder(markup=keyboard_format_purpose_of_payment_manager_buttons)
    return builder.as_markup()


async def send_summary_to_director(bot_tg, director_id_tg, request_id, data):
    request_director_buttons = [
        [types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"director_approve:{request_id}"),
         types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"director_reject:{request_id}")]
    ]

    builder = InlineKeyboardBuilder(request_director_buttons)

    message_text = f"‚ö™Ô∏è–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ id-{request_id}\n" \
                   f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['manager_name']} \n" \
                   f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_request']}\n" \
                   f"–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {data['payment_date']}\n" \
                   f"–í–∞–ª—é—Ç–∞: {data['currency']}\n" \
                   f"–°—É–º–º–∞: {data['amount']}\n" \
                   f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–ª–∞—Ç–µ–∂–∞: {data['payment_to_whom']}\n" \
                   f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {data['purpose_of_payment']}\n" \
                   f"–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: {data['payment_format']}\n"

    if data['payment_format'] == '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É':
        message_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('payment_phone_number', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n" \
                        f"–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞: {data.get('payment_recipient_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"

    message_text += f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {data['due_date']}"

    await bot_tg.send_message(director_id_tg, message_text,
                              reply_markup=builder.as_markup())


async def send_summary_to_accountant(bot_tg, accountant_id, request_id, approval):
    config = requests_initialize_database()
    db_manager = DatabaseManager(config)
    data = db_manager.get_request_data_by_id(request_id)
    if not data:
        print("–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    message_text = f"Ô∏è–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ id-{request_id}\n" \
                   f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['manager_name']} \n" \
                   f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_request']}\n" \
                   f"–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {data['payment_date']}\n" \
                   f"–í–∞–ª—é—Ç–∞: {data['currency']}\n" \
                   f"–°—É–º–º–∞: {data['amount']}\n" \
                   f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–ª–∞—Ç–µ–∂–∞: {data['payment_to_whom']}\n" \
                   f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {data['purpose_of_payment']}\n" \
                   f"–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: {data['payment_format']}\n"

    if data['payment_format'] == '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É':
        message_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('payment_phone_number', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n" \
                        f"–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞: {data.get('payment_recipient_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"

    message_text += f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {data['due_date']}"

    if approval == '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ':
        return message_text

    keyboard_request_accounting_buttons = [
        [types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accounting_approve:{request_id}"),
         types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"accounting_reject:{request_id}")]
    ]
    builder = InlineKeyboardBuilder(keyboard_request_accounting_buttons)

    await bot_tg.send_message(accountant_id, "‚ö™" + message_text, reply_markup=builder.as_markup())

    return message_text


async def send_feedback_to_manager(request_id, status, str_data):
    config = requests_initialize_database()
    db_manager = DatabaseManager(config)

    data = db_manager.get_request_data_by_id(request_id)
    if not data:
        print("–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    manager_id = data['manager_id']
    if status == '–æ–¥–æ–±—Ä–µ–Ω–∞':
        message_text = f"–ó–∞—è–≤–∫–∞ id-{request_id} {status} –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. \n"
    elif status == '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞':
        message_text = f"–ó–∞—è–≤–∫–∞ id-{request_id} {status} –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. \n"
    else:
        return

    message_text += str_data
    await bot.send_message(manager_id, message_text)


async def send_feedback_to_director(request_id, director, manager, status, data):
    if not data:
        logging(f"–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã id-{request_id}")
        return

    if status == '–ø—Ä–∏–Ω—è—Ç–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º':
        message_text = f"üü¢ –ó–∞—è–≤–∫–∞ id-{request_id} {status} \n"
    elif status == '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º':
        message_text = f"üî¥ –ó–∞—è–≤–∫–∞ id-{request_id} {status} \n"
    else:
        return

    message_text += data
    await bot.send_message(director, message_text)
    await bot.send_message(manager, message_text)


def show_request_details(request):
    title = ""
    if not request:
        return

    if request.director_approval == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ':
        title = f"–ó–∞—è–≤–∫–∞ id-{request.id} –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º\n"

    summary = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ id-{request.id}\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {request.manager_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {request.phone_request}\n"
        f"–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {request.payment_date}\n"
        f"–í–∞–ª—é—Ç–∞: {request.currency}\n"
        f"–°—É–º–º–∞: {request.amount}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–ª–∞—Ç–µ–∂–∞: {request.payment_to_whom}\n"
        f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {request.purpose_of_payment}\n"
        f"–§–æ—Ä–º–∞—Ç –æ–ø–ª–∞—Ç—ã: {request.payment_format}\n"
    )

    if request.payment_format == '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É':
        summary += (
            f"–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {request.payment_phone_number or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
            f"–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã: {request.payment_recipient_name or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        )
    summary += f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {request.due_date}\n" \
               f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {request.date_created}\n"

    return title + summary


def get_keyboard_request_phone_manager_buttons():
    keyboard_phone_manager_buttons = [
        [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=keyboard_phone_manager_buttons, resize_keyboard=True)


def setup_routers(dp: Dispatcher):
    @dp.message(CommandStart())
    async def command_start_handler(message: types.Message):
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=get_start_keyboard())

    @dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
    async def accountant_mode(message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=get_start_keyboard())

    @router_manager.message(lambda message: message.text == "–†–µ–∂–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" or message.text == "–û—Ç–º–µ–Ω–∞")
    async def manager_mode(message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", reply_markup=get_keyboard_main_manager_buttons())

    @router_manager.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
    async def start_request(message: types.Message, state: FSMContext):
        await state.clear()
        await state.update_data(manager_id=message.from_user.id, manager_name=message.from_user.full_name)
        # await state.set_state(RequestStates.manager_id)
        await message.answer(
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é",
            reply_markup=get_keyboard_request_phone_manager_buttons())
        await state.set_state(RequestStates.phone_request)

    @router_manager.message(RequestStates.phone_request)
    async def process_phone_request(message: types.Message, state: FSMContext):
        try:
            phone_number_user = str(message.contact.phone_number)
        except:
            phone_number_user = str(message.text)
        await state.update_data(phone_request=phone_number_user)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:",
                             reply_markup=get_keyboard_request_manager_buttons())
        await state.set_state(RequestStates.payment_date)

    @router_manager.message(RequestStates.payment_date)
    async def process_payment_date(message: types.Message, state: FSMContext):
        await state.update_data(payment_date=message.text)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É (RUB, USD, EUR –∏–ª–∏ –¥—Ä—É–≥–∞—è):",
                             reply_markup=get_inline_keyboard_currency_manager_buttons())

    @router_manager.callback_query(lambda c: c.data.startswith('currency:'))
    async def process_currency_selection(query: types.CallbackQuery, state: FSMContext):
        currency = query.data.split(':')[1]
        if currency == "other":
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤—Ä—É—á–Ω—É—é:")
            await state.set_state(RequestStates.currency)
        else:
            await state.update_data(currency=currency)
            await query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency}", reply_markup=None)
            await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ (—Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
            await state.set_state(RequestStates.amount)
        await query.answer()

    @router_manager.message(RequestStates.currency)
    async def process_manual_currency_input(message: types.Message, state: FSMContext):
        await state.update_data(currency=message.text)
        await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –≤–∞–ª—é—Ç—É: {message.text}.")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ (—Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
        await state.set_state(RequestStates.amount)

    @router_manager.message(RequestStates.amount)
    async def process_amount(message: types.Message, state: FSMContext):
        await state.update_data(amount=message.text)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ, –∫–æ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ø–ª–∞—Ç–µ–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–û–û '–†–æ–º–∞—à–∫–∞'):")
        await state.set_state(RequestStates.payment_to_whom)

    @router_manager.message(RequestStates.payment_to_whom)
    async def process_payment_to_whom(message: types.Message, state: FSMContext):
        await state.update_data(payment_to_whom=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:")
        await state.set_state(RequestStates.purpose_of_payment)

    @router_manager.message(RequestStates.purpose_of_payment)
    async def process_purpose_of_payment(message: types.Message, state: FSMContext):
        await state.update_data(purpose_of_payment=message.text)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π):",
                             reply_markup=get_keyboard_purpose_of_payment_manager_buttons())
        await state.set_state(RequestStates.payment_format)

    @router_manager.callback_query(lambda c: c.data.startswith("payment:") or c.data.startswith("format:"))
    async def process_payment_type(query: types.CallbackQuery, state: FSMContext):
        action_type, payment_type = query.data.split(":")

        if action_type == 'format':
            await state.update_data(payment_format=payment_type)

        if payment_type == "card_transfer":
            await state.update_data(payment_format="–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É")
            await query.message.answer(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç –æ–ø–ª–∞—Ç—ã: –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É")
            await asyncio.sleep(0.5)
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
            await state.set_state(RequestStates.payment_phone_number)
        elif payment_type == "bank_account" or payment_type == "cash":
            format_text = "–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç" if payment_type == "bank_account" else "–ù–∞–ª–∏—á–Ω—ã–µ"
            await state.update_data(payment_format=format_text)
            await query.message.answer(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç –æ–ø–ª–∞—Ç—ã: {format_text}")
            await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
            await state.set_state(RequestStates.due_date)
        await query.answer()

    @router_manager.message(RequestStates.payment_phone_number)
    async def process_phone_number(message: types.Message, state: FSMContext):
        await state.update_data(payment_phone_number=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")

        await state.set_state(RequestStates.payment_recipient_name)

    @router_manager.message(RequestStates.payment_recipient_name)
    async def process_recipient_name(message: types.Message, state: FSMContext):
        await state.update_data(payment_recipient_name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
        await state.set_state(RequestStates.due_date)

    @router_manager.message(RequestStates.due_date)
    async def process_commission_payer(message: types.Message, state: FSMContext, update_due_date=True):
        if update_due_date:
            await state.update_data(due_date=message.text)

        data = await state.get_data()
        summary = generate_summary(data)

        await message.answer(summary)
        await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
                             reply_markup=get_keyboard_send_summary_manager_buttons())

        await state.set_state(RequestStates.summary)

    @router_manager.callback_query(lambda c: c.data == "modify_request_manager")
    async def modify_request(query: types.CallbackQuery, state: FSMContext):
        await query.message.edit_reply_markup(reply_markup=None)
        # await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        await query.message.answer("–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                                   reply_markup=get_keyboard_modify_request_manager_buttons())
        await state.set_state(RequestStates.modify)

    @router_manager.callback_query(lambda c: c.data == "edit:payment_format")
    async def edit_payment_format(query: types.CallbackQuery):
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã:",
                                      reply_markup=get_keyboard_format_purpose_of_payment_manager_buttons())

    @router_manager.callback_query(lambda c: c.data.startswith("edit:"))
    async def edit_field(query: types.CallbackQuery, state: FSMContext):
        field = query.data.split(":")[1]
        field_name = field_names.get(field,
                                     field)
        await query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_name}:")
        await state.update_data(editing_field=field)
        await state.set_state(RequestStates.editing_value)

    @router_manager.message(RequestStates.editing_value)
    async def process_new_value(message: types.Message, state: FSMContext):
        data = await state.get_data()
        field_to_update = data.get('editing_field')

        if field_to_update:
            await state.update_data({field_to_update: message.text})

            await state.update_data(editing_field=None)

            await process_commission_payer(message, state, update_due_date=False)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

    @router_manager.callback_query(lambda c: c.data == "submit_request_manager")
    async def submit_request(query: types.CallbackQuery, state: FSMContext):
        await query.message.edit_text("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–∞–º–∏.", reply_markup=None)
        data = await state.get_data()

        data_to_send = {key: value for key, value in data.items() if key in [
            'manager_id', 'manager_name', 'phone_request', 'payment_date', 'currency', 'amount',
            'payment_to_whom', 'purpose_of_payment', 'payment_format', 'due_date',
            'payment_recipient_name', 'payment_phone_number'
        ]}

        config = requests_initialize_database()
        db_manager = DatabaseManager(config)
        try:
            request_id = db_manager.add_request(**data_to_send)
            print(request_id)
            if request_id:
                await query.message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É, –µ–π –ø—Ä–∏—Å–≤–æ–µ–Ω–æ id-{request_id}",
                                           reply_markup=get_keyboard_main_manager_buttons())
                if director_id:
                    await send_summary_to_director(bot, director_id, request_id, data)
                    db_manager.update_request_approval(request_id=request_id, approval=True, role='manager')
        except Exception as e:
            await query.message.answer(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}",
                                       reply_markup=get_keyboard_main_manager_buttons())
        finally:
            await state.clear()

    @router_director.message(lambda message: message.text == "–†–µ–∂–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")
    async def director_mode(message: types.Message, state: FSMContext):
        await state.clear()
        user_id = message.from_user.id
        if str(user_id) == str(director_id):
            await message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞.", reply_markup=get_keyboard_main_director_buttons())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ–∂–∏–º—É.", reply_markup=get_start_keyboard())

    @router_director.callback_query(lambda query: query.data.startswith("director_approve:"))
    async def approve_request(query: types.CallbackQuery):
        _, request_id = query.data.split(':')
        request_id = int(request_id)
        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.answer(text=f"–ó–∞—è–≤–∫–∞ —Å id-{request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É.")

        config = requests_initialize_database()
        db_manager = DatabaseManager(config)
        if db_manager.update_request_approval(request_id, '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', role='director'):
            data = await send_summary_to_accountant(bot_tg=bot, accountant_id=accounting_id,
                                                    request_id=request_id, approval='–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
            data_final = "üü¢" + data
            await query.message.answer(data_final)
            await send_feedback_to_manager(request_id, status='–æ–¥–æ–±—Ä–µ–Ω–∞', str_data=data_final)
        else:
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

    @router_director.callback_query(lambda query: query.data.startswith("director_reject:"))
    async def reject_request(query: types.CallbackQuery):
        _, request_id = query.data.split(':')
        request_id = int(request_id)
        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.answer(text=f"–í–∞–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ —Å id-{request_id}.")

        config = requests_initialize_database()
        db_manager = DatabaseManager(config)
        if db_manager.update_request_approval(request_id, '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', role='director'):
            data = await send_summary_to_accountant(bot_tg=bot, accountant_id=accounting_id, request_id=request_id,
                                                    approval='–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ')
            data_final = "üî¥" + data
            await query.message.answer(data_final)
            await send_feedback_to_manager(request_id, status='–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', str_data=data_final)
        else:
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

    @router_accounting.message(lambda message: message.text == "–†–µ–∂–∏–º –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞")
    async def accountant_mode(message: types.Message, state: FSMContext):
        await state.clear()
        user_id = message.from_user.id
        if str(user_id) == str(accounting_id):
            await message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞.", reply_markup=get_keyboard_main_accounting_buttons())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ–∂–∏–º—É.", reply_markup=get_start_keyboard())

    @router_accounting.callback_query(lambda query: query.data.startswith("accounting_approve:"))
    async def approve_request(query: types.CallbackQuery):
        _, request_id = query.data.split(':')

        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.answer(text=f"üü¢–í–∞–º–∏ –æ–¥–æ–±—Ä–µ–Ω–∞ –∑–∞—è–≤–∫–∞ —Å id-{request_id}.")

        request_id = int(request_id)
        config = requests_initialize_database()
        db_manager = DatabaseManager(config)
        if db_manager.update_request_approval(request_id, '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', role='accountant'):

            data = db_manager.get_request_data_by_id(request_id)
            data_str = generate_summary(data)

            await send_feedback_to_director(request_id=request_id, director=director_id,
                                            manager=int(data['manager_id']), status='–ø—Ä–∏–Ω—è—Ç–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º',
                                            data=data_str)
            await query.message.answer("üü¢" + data_str)
        else:
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

    @router_accounting.callback_query(lambda query: query.data.startswith("accounting_reject:"))
    async def reject_request(query: types.CallbackQuery):
        _, request_id = query.data.split(':')

        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.answer(text=f"üî¥–í–∞–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ —Å id-{request_id}.")

        request_id = int(request_id)
        config = requests_initialize_database()
        db_manager = DatabaseManager(config)
        if db_manager.update_request_approval(request_id, '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', role='accountant'):

            data = db_manager.get_request_data_by_id(request_id)
            data_str = generate_summary(data)

            await send_feedback_to_director(request_id=request_id, director=director_id,
                                            manager=int(data['manager_id']), status='–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º',
                                            data=data_str)
            await query.message.answer("üî¥" + data_str)
        else:
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

    @dp.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def show_statistics(message: types.Message, state: FSMContext):
        await state.clear()
        config = requests_initialize_database()
        db_manager = DatabaseManager(config)
        if message.from_user.id == director_id:
            unapproved_requests = db_manager.get_unapproved_requests_first(person='director')
            if unapproved_requests:
                data_str = show_request_details(unapproved_requests)

                request_director_buttons = [
                    [types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å",
                                                callback_data=f"director_approve:{unapproved_requests.id}"),
                     types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                                callback_data=f"director_reject:{unapproved_requests.id}")]
                ]
                builder = InlineKeyboardBuilder(markup=request_director_buttons).as_markup()
                await message.answer("‚ö™" + data_str, reply_markup=builder)
            else:
                await message.answer("–ù–µ—Ç –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫.")

        if message.from_user.id == accounting_id:
            unapproved_requests = db_manager.get_unapproved_requests_first(person='accountant')
            if unapproved_requests:
                data_str = show_request_details(unapproved_requests)

                request_director_buttons = [
                    [types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å",
                                                callback_data=f"accounting_approve:{unapproved_requests.id}"),
                     types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                                callback_data=f"accounting_reject:{unapproved_requests.id}")]
                ]
                builder = InlineKeyboardBuilder(markup=request_director_buttons).as_markup()
                await message.answer("‚ö™" + data_str, reply_markup=builder)
            else:
                await message.answer("–ù–µ—Ç –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é")

    dp.include_router(router_manager)
    dp.include_router(router_director)
    dp.include_router(router_accounting)
